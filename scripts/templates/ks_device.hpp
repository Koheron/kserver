/// {{ device.class_name|lower }}.hpp
///
/// Generated by devgen.
/// DO NOT EDIT.
///
/// (c) Koheron 

#ifndef __{{ device.class_name|upper }}_HPP__
#define __{{ device.class_name|upper }}_HPP__

{% for include in device.includes -%}
#include "{{ include }}"
{% endfor -%}

#include <core/kdevice.hpp>
#include <core/devices_manager.hpp>

#if KSERVER_HAS_THREADS
#include <mutex>
#endif

namespace kserver {

class {{ device.class_name }} : public KDevice<{{ device.tag }}>
{
  public:
    const device_t kind = {{ device.tag }};
    enum { __kind = {{ device.tag }} };

  public:
    {{ device.class_name }}(KServer* kserver, Context& ct)
    : KDevice<{{ device.tag }}>(kserver)
    {% for object in device.objects -%}
    , {{ object["name"] }}(ct)
    {% endfor -%}
    {}

    enum Operation {
        {% for operation in device.operations -%}
        {{ operation['tag'] }} = {{ operation['id'] }},
        {% endfor -%}        
        {{ device.tag|lower }}_op_num
    };

#if KSERVER_HAS_THREADS
    std::mutex mutex;
#endif

    {% for object in device.objects -%}
    {{ object["type"] }} {{ object["name"] }};
    {% endfor -%}

{% for operation in device.operations -%}
struct Argument_{{ operation['name'] }} {
{%- macro print_param_line(arg) %}
        {{ arg["type"] }} {{ arg["name"]}};
{%- endmacro -%}
{% for arg in operation["arguments"] -%}
    {{ arg["type"] }} {{ arg["name"]}};
{% endfor -%}
} args_{{ operation['name'] }};

{% endfor -%}

}; // class KS_{{ device.tag|capitalize }}

} // namespace kserver

#endif //__{{ device.class_name|upper }}_HPP__

