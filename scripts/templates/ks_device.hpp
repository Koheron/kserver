/// {{ device.class_name|lower }}.hpp
///
/// Generated by devgen.
/// DO NOT EDIT.
///
/// (c) Koheron 

#ifndef __{{ device.class_name|upper }}_HPP__
#define __{{ device.class_name|upper }}_HPP__

#include <core/kdevice.hpp>

{% for include in device.includes -%}
#include "{{ include }}"
{% endfor -%}

#include <memory>
#if KSERVER_HAS_THREADS
#include <mutex>
#endif

namespace kserver {

template<>
class KDevice<dev_id_of<{{ device.objects[0]["type"] }}>> : public KDeviceAbstract
{
  public:
    int execute(Command& cmd);
    template<int op> int execute_op(Command& cmd);

    KDevice(KServer *kserver, {{ device.objects[0]["type"] }}& {{ device.objects[0]["name"] }}_)
    : KDeviceAbstract(dev_id_of<{{ device.objects[0]["type"] }}>, kserver)
    , {{ device.objects[0]["name"] }}({{ device.objects[0]["name"] }}_)
    {}

    enum Operation {
        {% for operation in device.operations -%}
        {{ operation['tag'] }} = {{ operation['id'] }},
        {% endfor -%}
        {{ device.tag|lower }}_op_num
    };

#if KSERVER_HAS_THREADS
    std::mutex mutex;
#endif

    {{ device.objects[0]["type"] }}& {{ device.objects[0]["name"] }};

{% for operation in device.operations -%}
struct Argument_{{ operation['name'] }} {
{%- macro print_param_line(arg) %}
        {{ arg["type"] }} {{ arg["name"]}};
{%- endmacro -%}
{% for arg in operation["arguments"] -%}
    {{ arg["type"] }} {{ arg["name"]}};
{% endfor -%}
} args_{{ operation['name'] }};

{% endfor -%}

}; // class KS_{{ device.tag|capitalize }}

} // namespace kserver

#endif //__{{ device.class_name|upper }}_HPP__

