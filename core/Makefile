# Makefile for Koheron TCP server
#
# Generated by devgen
# {{ date }}
#
# (c) Koheron

CPUS = $(shell nproc 2> /dev/null || echo 1)
MAKEFLAGS += --jobs=$(CPUS)

CROSS_COMPILE=
ARCH_FLAGS=
DEFINES=

ADD_DEBUG_FLAGS = false

# Middleware include path
MIDWARE_INC_PATH=middleware

# --------------------------------------------------------------
# Objects to build
# --------------------------------------------------------------

# Objects in KServer
OBJS_KSERVER = core/kserver.o              \
               core/listening_channel.o    \
               core/kserver_commands.o     \
               core/kserver_session.o      \
               core/session_manager.o      \
               core/devices_manager.o      \
               core/peer_info.o            \
               core/commands.o             \
               core/kdevice.o              \
               core/websocket.o            \
               core/gason.o                \
               core/config.o               \
               core/crypto/base64.o        \
               core/crypto/sha1.o          \
               core/kserver_syslog.o       \
               core/signal_handler.o       \
               core/binary_parser.o

# Object in KServer/devices
OBJS_KS_DEV ?= {% for obj in objs_list %} {{ obj }} {% endfor %}

# Objects in Middleware
SRC_MIDWARE = $(shell find middleware -name '*.cpp')
OBJS_MIDWARE = $(subst .cpp,.o, $(SRC_MIDWARE))

# All objects 		
OBJS = $(OBJS_MIDWARE) $(OBJS_KSERVER) $(OBJS_KS_DEV) main.o	
# List of raw source files (all object files, renamed from .o to .c)
SRCS = $(subst .o,.c, $(OBJS), ))

# Executable name
TARGET=kserverd

# --------------------------------------------------------------
# Toolchains
# --------------------------------------------------------------

# Use Link Time Optimization
CC=$(CROSS_COMPILE)gcc -flto
CCPP=$(CROSS_COMPILE)g++ -flto

# --------------------------------------------------------------
# GCC compiling & linking flags
# --------------------------------------------------------------

CFLAGS= -Wall -Werror -Wno-unknown-pragmas \
        -I$(MIDWARE_INC_PATH) -I$(MIDWARE_INC_PATH)/libraries $(DEFINES)

CFLAGS += $(ARCH_FLAGS)

# Add debug/optimization flags
ifeq ($(ADD_DEBUG_FLAGS),true)
  CFLAGS += -rdynamic -g
  ifeq ($(TARGET_HOST),armhf)
    CFLAGS +=-mapcs-frame
  else ifeq ($(TARGET_HOST),armel)
    CFLAGS +=-mapcs-frame
  endif
else
  CFLAGS += -O3
endif

CPPFLAGS=$(CFLAGS) -std=c++14 -pthread

# --------------------------------------------------------------
# Libraries
# --------------------------------------------------------------

LIBS = -lm # -lpthread -lssl -lcrypto

# --------------------------------------------------------------
# Targets
# --------------------------------------------------------------

all: $(TARGET)

%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@

%.o: %.cpp
	$(CCPP) -c $(CPPFLAGS) $< -o $@

$(TARGET): $(OBJS)
	$(CCPP) -o $@ $^ $(CPPFLAGS) $(LIBS)

clean:
	rm -f $(TARGET) *.o $(OBJS)
