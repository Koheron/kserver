/// {{ device.class_name|lower }}.cpp
///
/// Generated by devgen.
/// DO NOT EDIT.
///
/// (c) Koheron 

#include "{{ device.class_name|lower }}.hpp"

#include <core/commands.hpp>
#include <core/kserver.hpp>
#include <core/kserver_session.hpp>
#include <core/syslog.tpp>
#if KSERVER_HAS_DEVMEM
#include <drivers/lib/memory_manager.hpp>
#endif
namespace kserver {

// #define THIS (static_cast<{{ device.class_name }}*>(this))
#define THIS this

void KDevice<{{ device.tag }}>::init()
{
  {% for object in device.objects -%}
  {{ object["name"] }} = std::make_unique<{{ object["type"] }}>(kserver->ct);
  {% endfor -%}
}

// template<>
// const {{ device.objects[0]["type"] }}& KDevice<{{ device.tag }}>::get_device() const
// {
//     return static_cast<const {{ device.class_name }}*>(this)->{{ device.objects[0]["name"] }};
// }

{% for operation in device.operations -%}
/////////////////////////////////////
// {{ operation['name'] }}

template<>
int KDevice<{{ device.tag }}>::
        execute_op<KDevice<{{ device.tag }}>::{{ operation['tag'] }}>(Command& cmd)
{
    {{ operation | get_parser(device) }}
    {{ operation | get_fragment(device) }}
}

{% endfor %}

int KDevice<{{ device.tag }}>::execute(Command& cmd)
{
#if KSERVER_HAS_THREADS
    std::lock_guard<std::mutex> lock(THIS->mutex);
#endif

    switch(cmd.operation) {
{% for operation in device.operations -%}
      case {{ operation['tag'] }}: {
        return execute_op<{{ operation['tag'] }}>(cmd);
      }
{% endfor %}
      case {{ device.tag | lower }}_op_num:
      default:
          kserver->syslog.print<SysLog::ERROR>("{{ device.class_name }}: Unknown operation\n");
          return -1;
    }
}

} // namespace kserver
