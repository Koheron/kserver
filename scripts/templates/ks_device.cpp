/// {{ device.class_name|lower }}.cpp
///
/// Generated by devgen.
/// DO NOT EDIT.
///
/// (c) Koheron 

#include "{{ device.ks_name }}.hpp"

#include <core/commands.hpp>
#include <core/kserver.hpp>
#include <core/kserver_session.hpp>
#include <core/syslog.tpp>
#if KSERVER_HAS_DEVMEM
#include <drivers/lib/memory_manager.hpp>
#endif

namespace kserver {

{% for operation in device.operations -%}
/////////////////////////////////////
// {{ operation['name'] }}

template<>
int KDevice<dev_id_of<{{ device.objects[0]["type"] }}>>::
        execute_op<KDevice<dev_id_of<{{ device.objects[0]["type"] }}>>::{{ operation['tag'] }}>(Command& cmd)
{
    {{ operation | get_parser(device) }}
    {{ operation | get_fragment(device) }}
}

{% endfor %}

int KDevice<dev_id_of<{{ device.objects[0]["type"] }}>>::execute(Command& cmd)
{
#if KSERVER_HAS_THREADS
    std::lock_guard<std::mutex> lock(mutex);
#endif

    switch(cmd.operation) {
{% for operation in device.operations -%}
      case {{ operation['tag'] }}: {
        return execute_op<{{ operation['tag'] }}>(cmd);
      }
{% endfor %}
      case {{ device.tag | lower }}_op_num:
      default:
          kserver->syslog.print<ERROR>("{{ device.class_name }}: Unknown operation\n");
          return -1;
    }
}

} // namespace kserver
